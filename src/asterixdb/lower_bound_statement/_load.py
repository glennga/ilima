import __init__
import logging
import tempfile

from src.asterixdb.executor import AbstractBenchmarkRunnable

logger = logging.getLogger(__name__)


class LowerBoundLoad(AbstractBenchmarkRunnable):
    NUMBER_OF_REPEATS = 1000

    def __init__(self):
        logger.info('Creating a temporary file to load from.')
        self.load = tempfile.NamedTemporaryFile(mode='w')
        self.load.write('{"a": 1}\n')
        super().__init__()

    def perform_benchmark(self):
        logger.info('Now executing the lower bound statement.')
        for i in range(self.NUMBER_OF_REPEATS):
            logger.debug(f'Executing run {i + 1} for the lower bound statement.')
            results = self.execute_sqlpp("""
                DROP DATAVERSE TestDataverse IF EXISTS;
                CREATE DATAVERSE TestDataverse;
                USE TestDataverse;

                CREATE TYPE GenericType AS { _id: uuid };
                CREATE DATASET GenericDataset (GenericType) PRIMARY KEY _id AUTOGENERATED;
            """)
            self.log_results(results)

            results = self.execute_sqlpp("""
                USE TestDataverse;
                LOAD DATASET GenericDataset USING localfs (
                    ("path"="%s"), ("format"="json")
                );
            """ % (self.config['benchmark']['nodeController']['address'] + '://' + self.load.name))
            results['runNumber'] = i + 1
            self.log_results(results)

    def perform_post(self):
        logger.info('Closing the temporary file.')
        self.load.close()

        logger.info('Removing test dataverse.')
        results = self.execute_sqlpp(""" DROP DATAVERSE TestDataverse; """)
        if results['status'] != 'success':
            logger.warning('Could not remove test dataverse.')
            logger.warning(f'JSON Dump: {results}')


if __name__ == '__main__':
    LowerBoundLoad().invoke()
